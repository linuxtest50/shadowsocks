#!/usr/bin/env python
import os
import subprocess
import socket
import platform
from shutil import copy2

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

MUSS_CONFIG_TPL = '''{
    "auth": true,
    "local_port": 7070,
    "server_password": [
        ["%s:8387", "%s", "%s"]
    ],
    "user_id": %d,
    "enable_dns_proxy": true,
    "target_dns_server": "8.8.8.8:53",
    "dns_proxy_port": 5454
}
'''

DNSMASQ_CONFIG_TPL = '''port=53
no-resolv
server=127.0.0.1#5555
%s
interface=%s
dhcp-range=%s,%s,%dh
dhcp-option=option:router,%s
dhcp-option=option:dns-server,%s
'''

SUPERVISORD_CONFIG = '''[supervisord]
logfile=/var/log/supervisord.log
pidfile=/var/run/muss-supervisord.pid
loglevel=error
minfds=65535
user=root

[program:smartdns]
command=/muss/muss-smartdns -b 127.0.0.1 -p 5555 -c /etc/muss/chnroute.txt -r 127.0.0.1:5454

[program:muss-redir]
command=/muss/muss-redir -c /etc/muss/config.json -l 0.0.0.0 -L 0.0.0.0

[program:dnsmasq]
command=/usr/sbin/dnsmasq -d -C /etc/muss/dnsmasq.conf
'''

RC_LOCAL = '''#!/bin/sh -e
/muss/redir-iptables.sh start
'''

def cmd(cmd):
    """
    Execute a command, return stdout and stderr in tuple
    """
    process = None
    try:
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
        return process.communicate()
    finally:
        if process is not None:
            process.stdout.close()
            process.stderr.close()


def get_interfaces():
    out, err = cmd('ifconfig | grep "^[a-z|A-Z|0-9]"')
    ret = []
    for line in out.split("\n"):
        if line.strip() == "":
            continue
        ifname = line.split()[0].strip()
        if ifname[-1] == ":":
            ifname = ifname[0:-1]
        ret.append(ifname)
    return ret


INTERFACES = get_interfaces()


def validate_string(data):
    if data == "":
        raise Exception("Please input data")
    return data


def validate_number(data):
    try:
        return int(data)
    except:
        raise Exception("Please input number")


def validate_ip(data):
    try:
        if len(data.split(".")) != 4:
            raise Exception("IP address format error")
        socket.inet_aton(data)
        return data
    except:
        raise Exception("Please input IP address")


def validate_interfaces(data):
    if data in INTERFACES:
        return data
    raise Exception("NIC name %s is not valid" % data)


def validate_bool(data):
    ldata = data.lower()
    return ldata in ["y", "yes"]


def get_input(msg, validate=validate_string, default=None, repeat=10):
    for i in range(repeat):
        data = raw_input(msg).strip()
        try:
            if data == "" and default is not None:
                return default
            return validate(data)
        except Exception as e:
            print unicode(e)
    print("Repeat too many times")
    os.exit(1)


def write_config_file(fname, content):
    with open(fname, "w+") as fp:
        fp.write(content)


class PackageInstaller(object):
    def __init__(self):
        self.dist = platform.dist()

    def install(self):
        print("Install Packages")
        print("Distribution is %s" % " ".join(self.dist))
        if self.dist[0].lower() == "ubuntu":
            self.install_packages_ubuntu()
            self.configure_ubuntu()
        elif self.dist[0].lower() == "centos":
            self.install_packages_centos()
            self.configure_centos()
        else:
            print("Do not support: %s" % self.dist[0])

    def install_packages_ubuntu(self):
        cmd("apt-get update")
        cmd("apt-get install -y --force-yes dnsmasq supervisor ipset")

    def install_packages_centos(self):
        cmd("yum install -y ipset dnsmasq epel-release")
        cmd("yum install -y supervisor")

    def configure_centos(self):
        pass

    def configure_ubuntu(self):
        if self.dist[1] <= "14.04":
            self.configure_ubuntu_upstart()
        else:
            self.configure_ubuntu_systemd()

    def configure_ubuntu_upstart(self):
        cmd("service dnsmasq stop")
        cmd("service supervisor stop")
        cmd("update-rc.d -f dnsmasq remove")
        cmd("update-rc.d -f supervisor remove")

    def configure_ubuntu_systemd(self):
        cmd("systemctl stop dnsmasq")
        cmd("systemctl stop supervisor")
        cmd("systemctl disable dnsmasq")
        cmd("systemctl disable supervisor")


def support_max_cache_ttl():
    out, err = cmd("/usr/sbin/dnsmasq --help")
    return out.find("max-cache-ttl") != -1


def get_dnsmasq_cache_parameter(enable):
    if not enable:
        return ""
    out, err = cmd("/usr/sbin/dnsmasq --help")
    if out.find("max-cache-ttl") != -1:
        return "max-cache-ttl=60"
    return ""

def generate_configs():
    print("Generate Config Files")
    # Ensure config DIR
    cmd("mkdir -p /etc/muss")
    # Muss-redir config
    userid = get_input("Please input muss User ID: ", validate_number)
    server_ip = get_input("Please input muss server IP: ", validate_ip)
    password = get_input("Please input muss password: ")
    method = get_input("Please input crypt method [aes-128-cfb-auth]: ", default="aes-128-cfb-auth")
    cfg_str = MUSS_CONFIG_TPL % (server_ip, password, method, userid)
    write_config_file("/etc/muss/config.json", cfg_str)
    # DNSMasq config
    dhcp_iface = get_input("Please input DHCP NIC name (%s): " % (", ".join(INTERFACES)), validate_interfaces)
    dhcp_range_start = get_input("Please input DHCP start IP [192.168.1.100]: ", validate_ip, "192.168.1.100")
    dhcp_range_end = get_input("Please input DHCP end IP [192.168.1.200]: ", validate_ip, "192.168.1.200")
    dhcp_lease_time = get_input("Please input DHCP lease time [48]: ", validate_number, 48)
    gateway_ip = get_input("Please input DHCP gateway option: ", validate_ip)
    dns_ip = get_input("Please input DHCP DNS option [%s]: " % gateway_ip, validate_ip, default=gateway_ip)
    if support_max_cache_ttl():
        short_cache_ttl_enable = get_input("Enable short DNS cache TTL (Yes/No) [No]: ", validate_bool, default=False)
    else:
        short_cache_ttl_enable = False
    cache_cfg = get_dnsmasq_cache_parameter(short_cache_ttl_enable)
    cfg_str = DNSMASQ_CONFIG_TPL % (cache_cfg, dhcp_iface, dhcp_range_start, dhcp_range_end, dhcp_lease_time, gateway_ip, dns_ip)
    write_config_file("/etc/muss/dnsmasq.conf", cfg_str)
    write_config_file("/etc/muss/supervisord.conf", SUPERVISORD_CONFIG)
    write_config_file("/etc/rc.local", RC_LOCAL)


def copy_files():
    print("Copy Files")
    cmd("mkdir -p /muss")
    for fname in ['muss-smartdns', 'muss-redir', 'redir-iptables.sh']:
        local_path = "%s/%s" % (BASE_DIR, fname)
        target = "/muss/%s" % fname
        copy2(local_path, target)

    cmd("mkdir -p /etc/muss")
    for fname in ['chnroute.txt']:
        local_path = "%s/%s" % (BASE_DIR, fname)
        copy2(local_path, "/etc/muss/%s" % fname)


def start_service():
    cmd("ulimit -n 65535")
    cmd("/muss/redir-iptables.sh start")
    cmd("/usr/bin/supervisord -c /etc/muss/supervisord.conf")
    print("Service Started")


def main():
    PackageInstaller().install()
    copy_files()
    generate_configs()
    print("Setup Finish")
    start = get_input("Start Service (Yes/No) [No]: ", validate_bool, default=False)
    if start:
        start_service()


if __name__ == "__main__":
    main()
